
/*
Here's an example for how it's done for attacking by adding a struct for attacking one target. We have:

ApproachAndAttackAction(ecsmanger *common.EntityManager, pl *avatar.PlayerData, gm *worldmap.GameMap, c *ecs.QueryResult, target *ecs.Entity)
StayDistantRangedAttackAction(ecsmanger *common.EntityManager, pl *avatar.PlayerData, gm *worldmap.GameMap, c *ecs.QueryResult, target *ecs.Entity)

The OneTargetAttack struct contains the function signature and one field for each parameter and implements execute.

type OneTargetAttack struct {
	fn      func(*common.EntityManager, *avatar.PlayerData, *worldmap.GameMap, *ecs.QueryResult, *ecs.Entity)
	params1 *common.EntityManager
	params2 *avatar.PlayerData
	params3 *worldmap.GameMap
	params4 *ecs.QueryResult
	params5 *ecs.Entity
}


func (a *OneTargetAttack) Execute() {
	a.fn(a.params1, a.params2, a.params3, a.params4, a.params5)
}


The system which calls these functions has to return actionmanager.Action, so we get this:

func CreatureAttackSystem(ecsmanger *common.EntityManager, pl *avatar.PlayerData, gm *worldmap.GameMap, c *ecs.QueryResult) actionmanager.Action

The CreatureAttackSystem returns the appropriate wrapper. I.Econst


	if _, ok = c.Entity.GetComponentData(ApproachAndAttackComp); ok {

		return &actionmanager.OneTargetAttack{
			Func:   ApproachAndAttackAction,
			Param1: ecsmanger,
			Param2: pl,
			Param3: gm,
			Param4: c,
			Param5: pl.PlayerEntity,
		}

	}


*/

_____________________________

The old Approach and Attack does not work with the new time management system. The code is below. There's too much going on.
By calling MeleeAttackSystem. Actions are not being added to the queue correctly

The StayDistantRangeAttackACtion has the same problems


func ApproachAndAttackAction(ecsmanger *common.EntityManager, pl *avatar.PlayerData, gm *worldmap.GameMap, c *ecs.QueryResult, target *ecs.Entity) {

	// Clear any existing movement if the creature attacks so there's no conflict
	RemoveMovementComponent(c)

	fmt.Println("Distance to target ", common.DistanceBetween(c.Entity, target))
	if common.DistanceBetween(c.Entity, target) > 1 {
		c.Entity.AddComponent(EntityFollowComp, &EntityFollow{Target: target})
		fmt.Println("Moving closer")
	} else if common.DistanceBetween(c.Entity, target) == 1 {
		fmt.Println("Arrived")
	}

	defenderPos := common.GetComponentType[*common.Position](target, common.PositionComponent)
	if common.DistanceBetween(c.Entity, target) == 1 {
		combat.MeleeAttackSystem(ecsmanger, pl, gm, common.GetPosition(c.Entity), defenderPos)

	}

}

}

// Stay within Ranged Attack Distance with the movement
func StayDistantRangedAttackAction(ecsmanger *common.EntityManager, pl *avatar.PlayerData, gm *worldmap.GameMap, c *ecs.QueryResult, target *ecs.Entity) {

	RemoveMovementComponent(c)

	RangedWeapon := common.GetComponentType[*equipment.RangedWeapon](c.Entity, equipment.RangedWeaponComponent)

	if RangedWeapon != nil {

		rangeToKeep := RangedWeapon.ShootingRange

		if common.GetPosition(c.Entity).InRange(common.GetPosition(target), RangedWeapon.ShootingRange) {
			combat.RangedAttackSystem(ecsmanger, pl, gm, common.GetPosition(c.Entity))

		} else {
			c.Entity.AddComponent(WithinRadiusComp, &DistanceToEntityMovement{Distance: rangeToKeep, Target: target})

		}

	} else {
		fmt.Println("No ranged weapon")
	}

}
