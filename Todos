

___Energy/Time System__



* Throwing action needs to take time

__Throwing__


* Miss chance - tile isn't always hit

___Shooting__

For Cone, rectangle, and line shape, let it rotate around the player only when shooting 


__Movement__





* Add Pack Movement - Only approach if N mothers are within r distance to the player

* Hit and Run - Attack then flee

* Fix bug that causes a creature to teleport if it tries to move into a blocked spot

* Consider using a different distance metric. There's implications to using Manhattan distance that I don't understand yet - especially in how it relates to diagonals


__Monster Bevavior__


* Monster can chose to melee attack, range attack, or throw

* Allow creature to choose its target. Currently the attacks use the PlayerData

__Randomness__

* Item Spawning - Determine where to spawn items and spawn with random properties

* Creature Spawning - Spawn during map gen and when out of 


__Levels__

Add multiple levels

Add more variety to the levels, including placeable items and tile variety



- - - - - - 

....Note....

Currently I create two slices of images. One from assets/tiles/walls and another from assets/tiles/floors.  The GameMap chooses a random tile to draw.  Also loading images from assets/tiles/decorations to add a small amount of flair. 
Not very complicated, but it will do for now. 

- - - - - - 



___Weapon and Armor__


* Equipping weapons and armor

___Consumables__

* Add consumables


___Visual Effects__



* Rotating shapes which have a direction

___Refactoring__



Map Drawing



___Other__




* Effect Stacking


* There's a bug that doesn't clear the AOE visual area when pressing F to fire while a throwable is selected

* Check on calls to make where slice is initialized with a size greater than 0. See if it works as intended, where we're just adding to it. Using append.
Might need to index instead

* Clean up all functions and methods which use a large number of parameters

* Add information, such as attack hits, misses, and damage done to the UI

* Throwing and shooting passes around lots of state. Refactor it. Especially in the way we use PlayerData. Also anything related to the drawing

* Create Shorter names for types and functions with long names

* Need a better way to create items for testing

* Make things that are private...private. 

* Make sure there are no memory leaks when removing entities and slicing slices to remove data

* The way playerData and the UI interact. There's a lot of state being passed around and manipualted. Anything in input nees to be looked at too

* Make it simpler to call all the functions that take a lot of paramters


Preallocate sizes of slices when possible

Need a better way to handle coordinate conversions





